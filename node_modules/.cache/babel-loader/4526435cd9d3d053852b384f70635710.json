{"ast":null,"code":"import _slicedToArray from \"/Users/ryzm/Desktop/connect-four/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryzm/Desktop/connect-four/src/Board.js\";\nimport React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet winConditions = [];\nlet userOnePlays = [];\nlet userTwoPlays = [];\nlet gameOver = false;\nlet userOneTurn = true;\nlet emptyArray = Array(7).fill(0);\n\nconst Board = () => {\n  const _useState = useState(Array(42).fill(0)),\n        _useState2 = _slicedToArray(_useState, 2),\n        allPlays = _useState2[0],\n        setAllPlays = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        updated = _useState4[0],\n        setUpdated = _useState4[1];\n\n  const checkIfWinner = () => {\n    if (winConditions.length == 0) {\n      winConditions = wc.getAllWinConditions();\n    }\n\n    if (checkIfUserIsWinner(1)) {\n      gameOver = true;\n      alert(\"User One Wins!\");\n    } else if (checkIfUserIsWinner(2)) {\n      gameOver = true;\n      alert(\"User Two Wins!\");\n    }\n  };\n\n  const checkIfUserIsWinner = user => {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n\n    for (let i = 0; i < winConditions.length; i++) {\n      let curWinCondition = winConditions[i];\n      userWins = true;\n\n      for (let j = 0; j < 4; j++) {\n        if (!userPlays.includes(curWinCondition[j])) {\n          userWins = false;\n          break;\n        }\n      }\n\n      if (userWins) {\n        break;\n      }\n    }\n\n    return userWins;\n  };\n\n  const handleClick = column => {\n    if (allPlays[column] != 0) {\n      return;\n    }\n\n    if (gameOver) {\n      return;\n    }\n\n    let index = 0;\n\n    for (let i = 0; i < 6; i++) {\n      index = column + (5 - i) * 7;\n\n      if (allPlays[index] === 0) {\n        if (userOneTurn) {\n          userOnePlays.push(index);\n        } else {\n          userTwoPlays.push(index);\n        }\n\n        break;\n      }\n    }\n\n    allPlays[index] = userOneTurn ? 1 : 2;\n    checkIfWinner();\n\n    if (!gameOver) {\n      userOneTurn = !userOneTurn;\n    }\n\n    setAllPlays(allPlays);\n    setUpdated(!updated);\n  };\n\n  const resetGame = () => {\n    gameOver = false;\n    userOnePlays = [];\n    userTwoPlays = [];\n    userOneTurn = true;\n    setAllPlays(Array(42).fill(0));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"backgroundStuff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"glow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Connect Four\"), React.createElement(\"button\", {\n    onClick: resetGame,\n    className: \"resetButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"div\", {\n    className: \"grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, emptyArray.map((element, i) => {\n    return React.createElement(Square, {\n      key: i.toString(),\n      id: i,\n      value: element,\n      handleClick: handleClick,\n      canClick: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }), allPlays.map((element, i) => {\n    return React.createElement(Square, {\n      key: i.toString(),\n      id: i,\n      value: element,\n      handleClick: handleClick,\n      canClick: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/connect-four/src/Board.js"],"names":["React","useState","Square","wc","winConditions","userOnePlays","userTwoPlays","gameOver","userOneTurn","emptyArray","Array","fill","Board","allPlays","setAllPlays","updated","setUpdated","checkIfWinner","length","getAllWinConditions","checkIfUserIsWinner","alert","user","userPlays","userWins","i","curWinCondition","j","includes","handleClick","column","index","push","resetGame","map","element","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet winConditions = []\nlet userOnePlays = []\nlet userTwoPlays = []\nlet gameOver = false\nlet userOneTurn = true\nlet emptyArray = Array(7).fill(0)\n\nconst Board = () => {\n\n  const [allPlays, setAllPlays] = useState(Array(42).fill(0))\n  const [updated, setUpdated] = useState(false)\n  \n  const checkIfWinner = () =>{\n    if(winConditions.length == 0){\n      winConditions = wc.getAllWinConditions();\n    }\n    \n    if(checkIfUserIsWinner(1)){\n      gameOver = true\n      alert(\"User One Wins!\")\n    }\n    else if(checkIfUserIsWinner(2)){\n      gameOver = true\n      alert(\"User Two Wins!\")\n    }\n  }\n\n  const checkIfUserIsWinner = (user) => {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n    for(let i = 0; i < winConditions.length; i++){\n      let curWinCondition = winConditions[i];\n      userWins = true;\n      for(let j = 0; j < 4; j++){\n        if(!userPlays.includes(curWinCondition[j])){\n          userWins = false;\n          break;\n        }\n      }\n      if(userWins){\n        break;\n      }\n    }\n    return userWins;\n  }\n\n  const handleClick = (column) => {\n    if(allPlays[column] != 0){\n      return;\n    }\n    if(gameOver){\n      return;\n    }\n    let index = 0\n    for(let i = 0; i < 6; i++){\n      index = column + (5 - i) * 7;\n      if(allPlays[index] === 0){\n        if(userOneTurn){\n          userOnePlays.push(index)\n        }\n        else{\n          userTwoPlays.push(index)\n        }\n        break;\n      }\n    }\n    \n    allPlays[index] = userOneTurn ? 1 : 2;\n    checkIfWinner();\n    if(!gameOver){\n      userOneTurn = !userOneTurn\n    }\n    \n    setAllPlays(allPlays)\n    setUpdated(!updated)\n  }\n\n  const resetGame = () =>{\n    gameOver = false\n    userOnePlays = []\n    userTwoPlays = []\n    userOneTurn = true\n    setAllPlays(Array(42).fill(0))\n  }\n\n  return (\n    <div className = \"backgroundStuff\">\n      <h1 className = \"glow\">Connect Four</h1>\n      <button onClick = {resetGame} className = \"resetButton\">Reset</button>\n      <div className = \"grid\">\n        {emptyArray.map((element,i) =>{\n              return(\n                <Square key = {i.toString()} id = {i} value = {element} handleClick = {handleClick} canClick = {false} />)\n          })}\n        {allPlays.map((element,i) =>{\n            return(\n              <Square key = {i.toString()} id = {i} value = {element} handleClick = {handleClick} canClick = {true} />)\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}