{"ast":null,"code":"import _slicedToArray from \"/Users/ryzm/Desktop/connect-four/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryzm/Desktop/connect-four/src/Board.js\";\nimport React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet allPlays = Array(42).fill(0);\nlet winConditions = [];\nlet userOnePlays = [];\nlet userTwoPlays = [];\nlet gameOver = false;\n\nconst Board = () => {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        userOneTurn = _useState2[0],\n        setUserOneTurn = _useState2[1];\n\n  function checkIfWinner() {\n    if (winConditions.length == 0) {\n      winConditions = wc.getAllWinConditions();\n    }\n\n    if (this.checkIfUserIsWinner(1)) {\n      gameOver = true;\n      alert(\"User One Wins!\");\n    } else if (this.checkIfUserIsWinner(2)) {\n      gameOver = true;\n      alert(\"User Two Wins!\");\n    }\n  }\n\n  function checkIfUserIsWinner(user) {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n\n    for (let i = 0; i < winConditions.length; i++) {\n      let curWinCondition = winConditions[i];\n      userWins = true;\n\n      for (let j = 0; j < 4; j++) {\n        if (!userPlays.includes(curWinCondition[j])) {\n          userWins = false;\n          break;\n        }\n      }\n\n      if (userWins) {\n        break;\n      }\n    }\n\n    return userWins;\n  }\n\n  function handleClick(column) {\n    if (allPlays[column] != 0) {\n      return;\n    }\n\n    if (gameOver) {\n      return;\n    }\n\n    for (let i = 0; i < 6; i++) {\n      let index = column + i * 7;\n\n      if (index === 0) {\n        allPlays[index] = userOneTurn ? 1 : 2;\n\n        if (userOneTurn) {\n          userOnePlays.push(index);\n        } else {\n          userTwoPlays.push(index);\n        }\n\n        break;\n      }\n    }\n\n    this.checkIfWinner();\n\n    if (!gameOver) {\n      setUserOneTurn(!userOneTurn);\n    }\n  }\n\n  function resetGame() {\n    gameOver = false;\n    userOnePlays = [];\n    userTwoPlays = [];\n    allPlays = Array(42).fill(0);\n    setUserOneTurn(true);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"backgroundStuff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"glow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Connect Four\"), React.createElement(\"button\", {\n    onClick: resetGame(),\n    className: \"resetButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"div\", {\n    className: \"grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, allPlays.map((element, i) => {\n    return React.createElement(Square, {\n      key: i.toString(),\n      id: i,\n      value: element,\n      handleClick: handleClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/connect-four/src/Board.js"],"names":["React","useState","Square","wc","allPlays","Array","fill","winConditions","userOnePlays","userTwoPlays","gameOver","Board","userOneTurn","setUserOneTurn","checkIfWinner","length","getAllWinConditions","checkIfUserIsWinner","alert","user","userPlays","userWins","i","curWinCondition","j","includes","handleClick","column","index","push","resetGame","map","element","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet allPlays = Array(42).fill(0);\nlet winConditions = []\nlet userOnePlays = []\nlet userTwoPlays = []\nlet gameOver = false\n\nconst Board = () => {\n  const [userOneTurn, setUserOneTurn] = useState(true)\n  \n  function checkIfWinner(){\n    if(winConditions.length == 0){\n      winConditions = wc.getAllWinConditions();\n    }\n    \n    if(this.checkIfUserIsWinner(1)){\n      gameOver = true\n      alert(\"User One Wins!\")\n    }\n    else if(this.checkIfUserIsWinner(2)){\n      gameOver = true\n      alert(\"User Two Wins!\")\n    }\n  }\n\n  function checkIfUserIsWinner (user){\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n    for(let i = 0; i < winConditions.length; i++){\n      let curWinCondition = winConditions[i];\n      userWins = true;\n      for(let j = 0; j < 4; j++){\n        if(!userPlays.includes(curWinCondition[j])){\n          userWins = false;\n          break;\n        }\n      }\n      if(userWins){\n        break;\n      }\n    }\n    return userWins;\n  }\n\n  function handleClick(column) {\n    if(allPlays[column] != 0){\n      return;\n    }\n    if(gameOver){\n      return;\n    }\n    for(let i = 0; i < 6; i++){\n      let index = column + i * 7;\n      if(index === 0){\n        allPlays[index] = userOneTurn ? 1 : 2;\n        if(userOneTurn){\n          userOnePlays.push(index)\n        }\n        else{\n          userTwoPlays.push(index)\n        }\n        break;\n      }\n    }\n    this.checkIfWinner();\n    if(!gameOver){\n      setUserOneTurn(!userOneTurn)\n    }\n  }\n\n  function resetGame (){\n    gameOver = false\n    userOnePlays = []\n    userTwoPlays = []\n    allPlays = Array(42).fill(0)\n    setUserOneTurn(true)\n  }\n\n  return (\n    <div className = \"backgroundStuff\">\n      <h1 className = \"glow\">Connect Four</h1>\n      <button onClick = {resetGame()} className = \"resetButton\">Reset</button>\n      <div className = \"grid\">\n        {allPlays.map((element,i) =>{\n            return(\n              <Square key = {i.toString()} id = {i} value = {element} handleClick = {handleClick()}  />)\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}