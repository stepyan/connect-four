{"ast":null,"code":"import _slicedToArray from \"/Users/ryzm/Desktop/connect-four/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryzm/Desktop/connect-four/src/Board.js\";\nimport React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet allPlays = Array(42).fill(0);\nlet winConditions = [];\n\nconst Board = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        userOnePlays = _useState2[0],\n        setUserOnePlays = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userTwoPlays = _useState4[0],\n        setUserTwoPlays = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        userOneTurn = _useState6[0],\n        setUserOneTurn = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        gameOver = _useState8[0],\n        setGameOver = _useState8[1];\n\n  checkIfWinner = () => {\n    if (winConditions.length == 0) {\n      winConditions = wc.getAllWinConditions();\n    }\n\n    if (this.checkIfUserIsWinner(1)) {\n      setGameOver(true);\n      alert(\"User One Wins!\");\n    } else if (this.checkIfUserIsWinner(2)) {\n      setGameOver(true);\n      alert(\"User Two Wins!\");\n    }\n  };\n\n  checkIfUserIsWinner = user => {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n\n    for (let i = 0; i < winConditions.length; i++) {\n      let curWinCondition = winConditions[i];\n      userWins = true;\n\n      for (let j = 0; j < 4; j++) {\n        if (!userPlays.includes(curWinCondition[j])) {\n          userWins = false;\n          break;\n        }\n      }\n\n      if (userWins) {\n        break;\n      }\n    }\n\n    return userWins;\n  };\n\n  handleClick = column => {\n    if (allPlays[column] != 0) {\n      return;\n    }\n\n    if (gameOver) {\n      return;\n    }\n\n    for (let i = 0; i < 6; i++) {\n      let index = column + i * 7;\n\n      if (index === 0) {\n        allPlays[index] = userOneTurn ? 1 : 2;\n\n        if (userOneTurn) {\n          setUserOnePlays([...userOnePlays, index]);\n        } else {\n          setUserTwoPlays([...userTwoPlays, index]);\n        }\n\n        break;\n      }\n    }\n\n    this.checkIfWinner();\n\n    if (!gameOver) {\n      setUserOneTurn(!userOneTurn);\n    }\n  };\n\n  resetGame = () => {\n    setGameOver(false);\n    setUserOnePlays([]);\n    setUserTwoPlays([]);\n    setUserOneTurn(true);\n    allPlays = Array(42).fill(0);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"backgroundStuff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"glow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Connect Four\"), React.createElement(\"button\", {\n    onClick: this.resetGame,\n    className: \"resetButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"div\", {\n    className: \"grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, allPlays.map((element, i) => {\n    return React.createElement(Square, {\n      key: i.toString(),\n      id: i,\n      value: element,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/connect-four/src/Board.js"],"names":["React","useState","Square","wc","allPlays","Array","fill","winConditions","Board","userOnePlays","setUserOnePlays","userTwoPlays","setUserTwoPlays","userOneTurn","setUserOneTurn","gameOver","setGameOver","checkIfWinner","length","getAllWinConditions","checkIfUserIsWinner","alert","user","userPlays","userWins","i","curWinCondition","j","includes","handleClick","column","index","resetGame","map","element","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet allPlays = Array(42).fill(0);\nlet winConditions = []\n\nconst Board = () => {\n  const [userOnePlays, setUserOnePlays] = useState([])\n  const [userTwoPlays, setUserTwoPlays] = useState([])\n  const [userOneTurn, setUserOneTurn] = useState(true)\n  const [gameOver, setGameOver] = useState(false)\n\n  checkIfWinner = () => {\n    if(winConditions.length == 0){\n      winConditions = wc.getAllWinConditions();\n    }\n    \n    if(this.checkIfUserIsWinner(1)){\n      setGameOver(true)\n      alert(\"User One Wins!\")\n    }\n    else if(this.checkIfUserIsWinner(2)){\n      setGameOver(true)\n      alert(\"User Two Wins!\")\n    }\n  }\n\n  checkIfUserIsWinner = (user) => {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n    for(let i = 0; i < winConditions.length; i++){\n      let curWinCondition = winConditions[i];\n      userWins = true;\n      for(let j = 0; j < 4; j++){\n        if(!userPlays.includes(curWinCondition[j])){\n          userWins = false;\n          break;\n        }\n      }\n      if(userWins){\n        break;\n      }\n    }\n    return userWins;\n  }\n\n  handleClick = (column) => {\n    if(allPlays[column] != 0){\n      return;\n    }\n    if(gameOver){\n      return;\n    }\n    for(let i = 0; i < 6; i++){\n      let index = column + i * 7;\n      if(index === 0){\n        allPlays[index] = userOneTurn ? 1 : 2;\n        if(userOneTurn){\n          setUserOnePlays([...userOnePlays, index])\n        }\n        else{\n          setUserTwoPlays([...userTwoPlays, index])\n        }\n        break;\n      }\n    }\n    this.checkIfWinner();\n    if(!gameOver){\n      setUserOneTurn(!userOneTurn)\n    }\n  }\n\n  resetGame = () => {\n    setGameOver(false)\n    setUserOnePlays([])\n    setUserTwoPlays([])\n    setUserOneTurn(true)\n    allPlays = Array(42).fill(0);\n  }\n\n  return (\n    <div className = \"backgroundStuff\">\n      <h1 className = \"glow\">Connect Four</h1>\n      <button onClick = {this.resetGame} className = \"resetButton\">Reset</button>\n      <div className = \"grid\">\n        {allPlays.map((element,i) =>{\n            return(\n              <Square key = {i.toString()} id = {i} value = {element} handleClick = {this.handleClick}  />)\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}