{"ast":null,"code":"import _slicedToArray from \"/Users/ryzm/Desktop/connect-four/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ryzm/Desktop/connect-four/src/Board.js\";\nimport React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet winConditions = [];\nlet userOnePlays = [];\nlet userTwoPlays = [];\nlet gameOver = false;\nlet userOneTurn = true;\nlet emptyArray = Array(7).fill(0);\nlet hoverColumn = -1;\nlet animationRunning = false;\nlet baseSpeed = 1.25;\nlet allPlays = Array(42).fill(0);\nconst finalTop = {\n  \"--finalTop\": \"500%\"\n};\nconst dropTime = {\n  \"--dropTime\": \"1.5s\"\n};\n\nconst Board = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        updated = _useState2[0],\n        setUpdated = _useState2[1];\n\n  const checkIfWinner = () => {\n    if (winConditions.length == 0) {\n      winConditions = wc.getAllWinConditions();\n    }\n\n    if (userOneTurn) {\n      if (checkIfUserIsWinner(1)) {\n        gameOver = true;\n        hoverColumn = -1;\n        alert(\"User One Wins!\");\n      }\n    } else {\n      if (checkIfUserIsWinner(2)) {\n        gameOver = true;\n        hoverColumn = -1;\n        alert(\"User Two Wins!\");\n      }\n    }\n  };\n\n  const checkIfUserIsWinner = user => {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n\n    for (let i = 0; i < winConditions.length; i++) {\n      let curWinCondition = winConditions[i];\n      userWins = true;\n\n      for (let j = 0; j < 4; j++) {\n        if (!userPlays.includes(curWinCondition[j])) {\n          userWins = false;\n          break;\n        }\n      }\n\n      if (userWins) {\n        break;\n      }\n    }\n\n    return userWins;\n  };\n\n  const handleClick = column => {\n    animationRunning = false;\n\n    if (allPlays[column] != 0) {\n      return;\n    }\n\n    if (gameOver) {\n      return;\n    }\n\n    let index = 0;\n\n    for (let i = 0; i < 6; i++) {\n      index = column + (5 - i) * 7;\n\n      if (allPlays[index] === 0) {\n        if (userOneTurn) {\n          userOnePlays.push(index);\n        } else {\n          userTwoPlays.push(index);\n        }\n\n        break;\n      }\n    }\n\n    allPlays[index] = userOneTurn ? 1 : 2;\n    checkIfWinner();\n\n    if (!gameOver) {\n      userOneTurn = !userOneTurn;\n    }\n\n    setUpdated(!updated);\n  };\n\n  const runAnimation = column => {\n    if (animationRunning) {\n      return;\n    }\n\n    let percentage = \"0%\";\n    let time = \"0s\";\n\n    for (let i = 0; i < 6; i++) {\n      let sqrDex = (5 - i) * 7 + column;\n\n      if (allPlays[sqrDex] === 0) {\n        percentage = ((5 - i) * 100 + 100).toString() + \"%\";\n        time = (baseSpeed / 6 * (6 - i)).toString() + \"s\";\n        break;\n      }\n    }\n\n    Object.keys(finalTop).map(key => {\n      finalTop[key] = percentage;\n      const value = finalTop[key];\n      document.documentElement.style.setProperty(key, value);\n    });\n    Object.keys(dropTime).map(key => {\n      dropTime[key] = time;\n      const value = dropTime[key];\n      document.documentElement.style.setProperty(key, value);\n    });\n    animationRunning = true;\n    setUpdated(!updated);\n  };\n\n  const hoverOver = column => {\n    if (gameOver) {\n      return;\n    }\n\n    hoverColumn = column;\n\n    if (animationRunning) {\n      return;\n    }\n\n    setUpdated(!updated);\n  };\n\n  const resetGame = () => {\n    gameOver = false;\n    userOnePlays = [];\n    userTwoPlays = [];\n    userOneTurn = true;\n    hoverColumn = -1;\n    allPlays = Array(42).fill(0);\n    setUpdated(!updated);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"backgroundStuff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"glow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Connect Four\"), React.createElement(\"button\", {\n    onClick: resetGame,\n    className: \"resetButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"div\", {\n    className: \"grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, emptyArray.map((element, i) => {\n    return React.createElement(Square, {\n      key: i.toString(),\n      id: i,\n      value: element,\n      handleClick: handleClick,\n      topSquare: true,\n      hoverColumn: gameOver ? -1 : hoverColumn,\n      hoverOver: hoverOver,\n      userOneTurn: userOneTurn,\n      runAnimation: runAnimation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    });\n  }), allPlays.map((element, i) => {\n    return React.createElement(Square, {\n      key: i.toString(),\n      id: i,\n      value: element,\n      handleClick: handleClick,\n      topSquare: false,\n      hoverColumn: gameOver ? -1 : hoverColumn,\n      hoverOver: hoverOver,\n      userOneTurn: userOneTurn,\n      runAnimation: runAnimation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/ryzm/Desktop/connect-four/src/Board.js"],"names":["React","useState","Square","wc","winConditions","userOnePlays","userTwoPlays","gameOver","userOneTurn","emptyArray","Array","fill","hoverColumn","animationRunning","baseSpeed","allPlays","finalTop","dropTime","Board","updated","setUpdated","checkIfWinner","length","getAllWinConditions","checkIfUserIsWinner","alert","user","userPlays","userWins","i","curWinCondition","j","includes","handleClick","column","index","push","runAnimation","percentage","time","sqrDex","toString","Object","keys","map","key","value","document","documentElement","style","setProperty","hoverOver","resetGame","element"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from \"./Square.js\";\nimport wc from './WinningConditions.js';\nlet winConditions = []\nlet userOnePlays = []\nlet userTwoPlays = []\nlet gameOver = false\nlet userOneTurn = true\nlet emptyArray = Array(7).fill(0)\nlet hoverColumn = -1\nlet animationRunning = false\nlet baseSpeed = 1.25;\nlet allPlays = Array(42).fill(0)\nconst finalTop = {\n  \"--finalTop\": \"500%\"\n};\nconst dropTime = {\n  \"--dropTime\": \"1.5s\"\n};\nconst Board = () => {\n\n  const [updated, setUpdated] = useState(false)\n  \n  const checkIfWinner = () =>{\n    if(winConditions.length == 0){\n      winConditions = wc.getAllWinConditions();\n    }\n    if(userOneTurn){\n      if(checkIfUserIsWinner(1)){\n        gameOver = true\n        hoverColumn = -1\n        alert(\"User One Wins!\")\n      }\n    }\n    else{\n      if(checkIfUserIsWinner(2)){\n        gameOver = true\n        hoverColumn = -1\n        alert(\"User Two Wins!\")\n      }\n    }\n  }\n\n  const checkIfUserIsWinner = (user) => {\n    let userPlays = user == 1 ? userOnePlays : userTwoPlays;\n    let userWins = false;\n    for(let i = 0; i < winConditions.length; i++){\n      let curWinCondition = winConditions[i];\n      userWins = true;\n      for(let j = 0; j < 4; j++){\n        if(!userPlays.includes(curWinCondition[j])){\n          userWins = false;\n          break;\n        }\n      }\n      if(userWins){\n        break;\n      }\n    }\n    return userWins;\n  }\n\n  const handleClick = (column) => {\n    animationRunning = false\n    if(allPlays[column] != 0){\n      return;\n    }\n    if(gameOver){\n      return;\n    }\n    let index = 0\n    for(let i = 0; i < 6; i++){\n      index = column + (5 - i) * 7;\n      if(allPlays[index] === 0){\n        if(userOneTurn){\n          userOnePlays.push(index)\n        }\n        else{\n          userTwoPlays.push(index)\n        }\n        break;\n      }\n    }\n    allPlays[index] = userOneTurn ? 1 : 2;\n    checkIfWinner();\n    if(!gameOver){\n      userOneTurn = !userOneTurn\n    }\n    setUpdated(!updated)\n  }\n\n  const runAnimation = (column) => {\n    if(animationRunning){\n      return;\n    }\n    let percentage = \"0%\";\n    let time = \"0s\";\n    for(let i = 0; i < 6; i++){\n      let sqrDex = (5-i)*7 + column;\n      if(allPlays[sqrDex] === 0){\n        percentage = ((5-i) * 100 + 100).toString() + \"%\"\n        time = ((baseSpeed/6) * (6-i)).toString() + \"s\"\n        break;\n      }\n    }\n    Object.keys(finalTop).map(key => {\n      finalTop[key] = percentage\n      const value = finalTop[key];\n      document.documentElement.style.setProperty(key, value);\n    });\n    Object.keys(dropTime).map(key => {\n      dropTime[key] = time\n      const value = dropTime[key];\n      document.documentElement.style.setProperty(key, value);\n    });\n    animationRunning = true\n    setUpdated(!updated)\n  }\n\n  const hoverOver = (column) => {\n    if(gameOver){\n      return;\n    }\n    hoverColumn = column\n    if(animationRunning){\n      return;\n    }\n    setUpdated(!updated)\n  }\n\n  const resetGame = () =>{\n    gameOver = false\n    userOnePlays = []\n    userTwoPlays = []\n    userOneTurn = true\n    hoverColumn = -1\n    allPlays = Array(42).fill(0)\n    setUpdated(!updated)\n  }\n\n  return (\n    <div className = \"backgroundStuff\">\n      <h1 className = \"glow\">Connect Four</h1>\n      <button onClick = {resetGame} className = \"resetButton\">Reset</button>\n      <div className = \"grid\">\n        {emptyArray.map((element,i) =>{\n              return(\n                <Square key = {i.toString()} id = {i} value = {element} handleClick = {handleClick} topSquare = {true} hoverColumn = {gameOver ? -1 : hoverColumn} hoverOver = {hoverOver} userOneTurn = {userOneTurn} runAnimation = {runAnimation}/>)\n          })}\n        {allPlays.map((element,i) =>{\n            return(\n              <Square key = {i.toString()} id = {i} value = {element} handleClick = {handleClick} topSquare = {false} hoverColumn = {gameOver ? -1 : hoverColumn} hoverOver = {hoverOver} userOneTurn = {userOneTurn} runAnimation = {runAnimation}/>)\n          })}\n          \n      </div>\n      \n    </div>\n  );\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}